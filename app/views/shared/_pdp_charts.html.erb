<!-- app/views/shared/_pdp_charts.html.erb -->
<%#
  Expects @chart_data to be an ARRAY:
  [
    { label: "John Smith", items_data: [...], wa_data: [...], effort_data: [...] },
    { label: "Bob Martin", items_data: [...], wa_data: [...], effort_data: [...] },
    ...
  ]
%>

<div class="mb-8">
  <h2 class="text-xl font-bold mb-2"><%= @chart_label %></h2>
  <div id="pdpChartContainer" style="height: 600px; width: 100%;"></div>
</div>

<script type="text/javascript">
document.addEventListener("DOMContentLoaded", function() {

  // <%= raw @chart_data.to_json %> might look like:
  // [
  //   { "label": "John Smith",
  //     "items_data":  [ { "x": "2024-01-01", "y": 18}, ... ],
  //     "wa_data":     [ { "x": "2024-01-01", "y": 30}, ... ],
  //     "effort_data": [ { "x": "2024-01-01", "y": 700}, ... ]
  //   },
  //   { "label": "Bob Martin",
  //     "items_data":  [...],
  //     "wa_data":     [...],
  //     "effort_data": [...]
  //   }
  // ]
  const dataSetsRaw = <%= raw(@chart_data.to_json) %>

    console.log(dataSetsRaw)

  // Convert string date -> new Date
  function parseData(arr) {
    return arr.map(pt => ({ x: new Date(pt.x), y: pt.y }))
  }

  // If you want multiple color sets, define them:
  // We'll cycle through a small palette
  const colorPalette = [
    "#66bb6a", "#ff9800", "#29b6f6", "#ab47bc", "#ec407a", "#ffa726", "#8d6e63",
    "#78909c", "#5c6bc0", "#ffa000", "#7cb342", "#26c6da"
  ]
  let colorIndex = 0

  // We'll build two arrays:
  //   mainChartLines => lines for top chart (WA => axisY, Effort => axisY2)
  //   subChartLines  => lines for bottom chart (# Items => axisY only)
  let mainChartLines = []
  let subChartLines = []

  dataSetsRaw.forEach((ds, idx) => {
    // We'll parse the arrays to convert "x" from string to Date
    let wa = parseData(ds.wa_data)
    let eff = parseData(ds.effort_data)
    let itm = parseData(ds.items_data)

    // We'll pick two colors for this data set: one for WA, one for Effort
    let waColor = colorPalette[colorIndex % colorPalette.length]
    colorIndex++
    let effColor = colorPalette[colorIndex % colorPalette.length]
    colorIndex++

    // For # Items, we can pick a 3rd color or reuse one of them
    let itemsColor = colorPalette[colorIndex % colorPalette.length]
    colorIndex++

    // Add two lines to main chart
    mainChartLines.push({
      type: "line",
      name: ds.label + " WA",
      axisYType: "primary",  // left axis
      color: waColor,
      lineThickness: 3,
      markerSize: 5,
      showInLegend: true,
      dataPoints: wa
    })

    mainChartLines.push({
      type: "line",
      name: ds.label + " Effort",
      axisYType: "secondary", // right axis
      color: effColor,
      lineThickness: 3,
      markerSize: 5,
      showInLegend: true,
      dataPoints: eff
    })

    // Add one line to sub chart for # items
    subChartLines.push({
      type: "line",
      name: ds.label + " Items",
      color: itemsColor,
      lineThickness: 3,
      markerSize: 5,
      showInLegend: true,
      dataPoints: itm
    })
  })

  // Now we create a StockChart with 2 sub-charts
  const stockChart = new CanvasJS.StockChart("pdpChartContainer", {
    theme: "dark2",
    backgroundColor: "#1f2937",
    title: {
      text: "<%= @chart_label %>"
    },
    charts: [
      // MAIN CHART for Weighted Average & Effort
      {
        height: 300,
        axisY: {
          title: "Weighted Average",
          minimum: 0
        },
        axisY2: {
          title: "Effort",
          minimum: 0
        },
        data: mainChartLines
      },
      // SUB CHART for # Items
      {
        height: 200,
        axisY: {
          title: "# Items",
          minimum: 0
        },
        data: subChartLines
      }
    ],
    navigator: {
      slider: {
        minimum: new Date(2024, 0, 1),
        maximum: new Date(2024, 11, 31)
      }
    }
  })

  stockChart.render()
})
</script>
