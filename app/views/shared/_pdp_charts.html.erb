<%#
  Expects @chart_data to be an ARRAY:
  [
    { label: "John Smith", items_data: [...], wa_data: [...], effort_data: [...] },
    { label: "Bob Martin", items_data: [...], wa_data: [...], effort_data: [...] },
    { label: "Bob Martin", items_data: [...], wa_data: [...], effort_data: [...], burnout_line_data: [...], changed_priorities_line_data: [...], spreading_thin_line_data: [...] },
    ...
  ]
%>

<% if @chart_data.present? %>
  <div class="mb-8">
    <h2 class="text-xl font-bold mb-2"><%= @chart_label %></h2>

    <!-- Контейнеры для отдельных графиков -->
    <div class="mb-6">
      <h3 class="text-lg font-semibold mb-2">Effort</h3>
      <div id="effortChartContainer" style="height: 300px; width: 100%;"></div>
    </div>

    <div class="mb-6">
      <h3 class="text-lg font-semibold mb-2">Weighted Average (WA)</h3>
      <div id="waChartContainer" style="height: 300px; width: 100%;"></div>
    </div>

    <div class="mb-6">
      <h3 class="text-lg font-semibold mb-2">Items</h3>
      <div id="itemsChartContainer" style="height: 300px; width: 100%;"></div>
    </div>
  </div>

  <script type="text/javascript">
  document.addEventListener("turbo:load", function() {

    const dataSetsRaw = <%= raw(@chart_data.to_json) %>;

    console.log(dataSetsRaw);

    // Функция для преобразования строковых дат в объекты Date
    function parseData(arr) {
      return arr.map(pt => ({ x: new Date(pt.x), y: pt.y }));
    }

    // Определение цветовой палитры
    const colorPalette = [
      "#66bb6a", "#29b6f6", "#ab47bc", "#ec407a", "#ffa726", "#8d6e63",
      "#78909c", "#5c6bc0", "#ffa000", "#7cb342", "#26c6da", "#ff9800"
    ];

    const redColor = "#f44336";

    let colorIndex = 0;

    // Инициализация массивов данных для каждого графика
    let waChartLines = [];
    let effortChartLines = [];
    let itemsChartLines = [];

    dataSetsRaw.forEach((ds) => {
      // Парсинг данных
      let wa = parseData(ds.wa_data);
      let eff = parseData(ds.effort_data);
      let itm = parseData(ds.items_data);

      // Назначение цветов
      let waColor = colorPalette[colorIndex % colorPalette.length];
      colorIndex++;
      let effColor = colorPalette[colorIndex % colorPalette.length];
      colorIndex++;
      let itemsColor = colorPalette[colorIndex % colorPalette.length];
      colorIndex++;

      // Добавление линий в соответствующие массивы
      waChartLines.push({
        type: "line",
        name: ds.label,
        color: waColor,
        lineThickness: 3,
        markerSize: 5,
        showInLegend: true,
        dataPoints: wa
      });

      effortChartLines.push({
        type: "line",
        name: ds.label,
        color: effColor,
        lineThickness: 3,
        markerSize: 5,
        showInLegend: true,
        dataPoints: eff
      });

      itemsChartLines.push({
        type: "line",
        name: ds.label,
        color: itemsColor,
        lineThickness: 3,
        markerSize: 5,
        showInLegend: true,
        dataPoints: itm
      });
    });

    // Функция для создания графика
    function createChart(containerId, titleText, yAxisTitle, yAxisOptions = {}) {
      return new CanvasJS.Chart(containerId, {
        theme: "dark2",
        backgroundColor: "#1f2937",
        animationEnabled: true,
        title: {
          text: titleText,
          fontColor: "#FFFFFF"
        },
        axisX: {
          valueFormatString: "MMM YYYY",
          labelFontColor: "#FFFFFF",
          gridColor: "#4B5563"
        },
        axisY: {
          title: yAxisTitle,
          titleFontColor: "#FFFFFF",
          labelFontColor: "#FFFFFF",
          gridColor: "#4B5563",
          ...yAxisOptions
        },
        toolTip: {
          shared: true
        },
        legend: {
          cursor: "pointer",
          itemclick: function(e) {
            if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
              e.dataSeries.visible = false;
            } else {
              e.dataSeries.visible = true;
            }
            e.chart.render();
          },
          fontColor: "#FFFFFF"
        },
        data: []
      });
    }

    // Создание графиков
    const waChart = createChart("waChartContainer", "Weighted Average (WA)", "WA");
    waChart.options.data = waChartLines;
    waChart.render();

    const effortChart = createChart("effortChartContainer", "Effort", "Effort");
    effortChart.options.data = effortChartLines;
    effortChart.render();

    const itemsChart = createChart("itemsChartContainer", "# Items", "# Items");
    itemsChart.options.data = itemsChartLines;
    itemsChart.render();

  });
  </script>
<% end %>
