<%#
  Expects @chart_data to be an ARRAY:
  [
    { label: "John Smith", items_data: [...], wa_data: [...], effort_data: [...] },
    { label: "Bob Martin", items_data: [...], wa_data: [...], effort_data: [...] },
    { label: "Bob Martin", items_data: [...], wa_data: [...], effort_data: [...], burnout_line_data: [...], changed_priorities_line_data: [...], spreading_thin_line_data: [...] },
    ...
  ]
%>

<% if @chart_data.present? %>
  <div class="mb-8">
    <h2 class="text-xl font-bold mb-2"><%= @chart_label %></h2>

    <!-- Три контейнера под графики -->
    <div class="mb-6">
      <h3 class="text-lg font-semibold mb-2">Effort</h3>
      <div id="effortChartContainer" style="height: 300px; width: 100%;"></div>
    </div>

    <div class="mb-6">
      <h3 class="text-lg font-semibold mb-2">Weighted Average (WA)</h3>
      <div id="waChartContainer" style="height: 300px; width: 100%;"></div>
    </div>

    <div class="mb-6">
      <h3 class="text-lg font-semibold mb-2">Items</h3>
      <div id="itemsChartContainer" style="height: 300px; width: 100%;"></div>
    </div>

    <!-- Отдельная секция-легенда для ивентов -->
    <%
      create_event_path = if @superadmin && @company.present? && !@team.present?
                            superadmin_company_events_path(@company)
                          elsif @superadmin && @company.present? && @team.present? && !@user.present?
                            superadmin_company_team_events_path(@company, @team)
                          elsif @superadmin && @company.present? && @team.present? && @user.present?
                            superadmin_company_team_user_events_path(@company, @team, @user)

                          # Company Owner context
                          elsif @company.present? && !@team.present? # company
                            company_owner_company_events_path(@company)
                          elsif @company.present? && @team.present? && !@user.present? # company team
                            company_owner_company_team_events_path(@company, @team)
                          elsif @company.present? && @team.present? && @user.present? # company team user
                            company_owner_company_team_user_events_path(@company, @team, @user)

                          # Manager context
                          elsif @team.present? && !@user.present? # team
                            manager_team_events_path(@team)
                          elsif @team.present? && @user.present? # team user
                            manager_team_user_events_path(@team, @user)

                          # My Events context
                          else
                            my_events_path
                          end
    %>


    <div class="mb-6 bg-gray-800 p-4 rounded">
      <div class="flex items-center justify-between mb-2">
        <h3 class="text-lg font-semibold"><%= t('labels.events') %></h3>

        <%= link_to "+ #{t('labels.manage_events')}",
                    create_event_path,
                    class: "bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded" %>
      </div>

      <% if @events.present? %>
        <ul class="list-disc list-inside">
          <% @events.each do |ev| %>
            <li class="text-gray-200">
              <strong><%= ev.date.strftime("%Y-%m-%d") %>:</strong> <%= ev.name %>
            </li>
          <% end %>
        </ul>
      <% else %>
        <p class="text-sm text-gray-400"><%= t('labels.no_events_yet') %></p>
      <% end %>
    </div>

  </div>

  <script type="text/javascript">
    document.addEventListener("turbo:load", function() {
      const dataSetsRaw = <%= raw(@chart_data.to_json) %>;
      const eventsRaw   = <%= @events.present? ? raw(@events.to_json) : "[]" %>;

      // Разбираем массив объектов @events: [{id, name, date, ...}, ...]
      // Преобразуем дату в JS Date
      const events = eventsRaw.map(ev => {
        return {
          ...ev,
          jsDate: new Date(ev.date)  // превратим строку в Date
        };
      });

      // Функция parseData (из прошлого ответа)
      function parseData(arr) {
        if (!arr) return [];
        return arr.map(pt => ({ x: new Date(pt.x), y: pt.y }));
      }

      // Цветовая палитра (без красного)
      const colorPalette = [
        "#66bb6a", "#29b6f6", "#ab47bc", "#ec407a",
        "#ffa726", "#8d6e63", "#78909c", "#5c6bc0",
        "#ffa000", "#7cb342", "#26c6da", "#ff9800"
      ];
      const redColor = "#f44336"; // для «нормативных» линий (см. предыдущий ответ)

      let colorIndex = 0;

      // Массивы для данных
      let waChartLines     = [];
      let effortChartLines = [];
      let itemsChartLines  = [];

      dataSetsRaw.forEach((ds) => {
        let waData  = parseData(ds.wa_data);
        let effData = parseData(ds.effort_data);
        let itmData = parseData(ds.items_data);

        // Проверяем, является ли это «линия-норматив»
        let isNormativeLine =
          ds.label.includes("Лінія ризику вигоряння") ||
          ds.label.includes("Лінія зміни пріорітетів") ||
          ds.label.includes("Лінія розпилення");

        let waColor    = isNormativeLine ? redColor : colorPalette[colorIndex % colorPalette.length];
        colorIndex++;
        let effColor   = isNormativeLine ? redColor : colorPalette[colorIndex % colorPalette.length];
        colorIndex++;
        let itemsColor = isNormativeLine ? redColor : colorPalette[colorIndex % colorPalette.length];
        colorIndex++;

        waChartLines.push({
          type: "line",
          name: ds.label,
          color: waColor,
          lineThickness: 3,
          markerSize: 5,
          showInLegend: true,
          dataPoints: waData
        });

        effortChartLines.push({
          type: "line",
          name: ds.label,
          color: effColor,
          lineThickness: 3,
          markerSize: 5,
          showInLegend: true,
          dataPoints: effData
        });

        itemsChartLines.push({
          type: "line",
          name: ds.label,
          color: itemsColor,
          lineThickness: 3,
          markerSize: 5,
          showInLegend: true,
          dataPoints: itmData
        });
      });

      // -- Основная фишка: создаём массив stripLines для axisX из events
      // CanvasJS stripLine принимает value: <число или Date> и рисует вертикальную линию
      // Можно настроить thickness, color, label, ...
      function buildStripLinesFromEvents(eventsData) {
        return eventsData.map(ev => {
          return {
            value: ev.jsDate,         // вертикальная линия на этой дате
            color: "#f44336",         // красный
            thickness: 2,
            lineDashType: "dash",
            label: ev.name,           // подпись события
            labelFontColor: "#f44336",
            labelBackgroundColor: "#1f2937", // подложка под текстом
            showOnTop: true           // чтобы линия была поверх серии данных
          };
        });
      }

      // Функция-шаблон для создания графиков
      function createChart(containerId, titleText, yAxisTitle) {
        return new CanvasJS.Chart(containerId, {
          theme: "dark2",
          backgroundColor: "#1f2937",
          animationEnabled: true,
          title: {
            text: titleText,
            fontColor: "#FFFFFF"
          },
          axisX: {
            valueFormatString: "MMM YYYY",
            labelFontColor: "#FFFFFF",
            gridColor: "#4B5563",

            // Добавляем stripLines для всех event'ов:
            stripLines: buildStripLinesFromEvents(events)
          },
          axisY: {
            title: yAxisTitle,
            titleFontColor: "#FFFFFF",
            labelFontColor: "#FFFFFF",
            gridColor: "#4B5563"
          },
          toolTip: {
            shared: true
          },
          legend: {
            cursor: "pointer",
            fontColor: "#FFFFFF",
            itemclick: function(e) {
              if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                e.dataSeries.visible = false;
              } else {
                e.dataSeries.visible = true;
              }
              e.chart.render();
            }
          },
          data: []
        });
      }

      // Создаём три графика
      const effortChart = createChart("effortChartContainer", "Effort", "Effort");
      effortChart.options.data = effortChartLines;
      effortChart.render();

      const waChart = createChart("waChartContainer", "Weighted Average (WA)", "WA");
      waChart.options.data = waChartLines;
      waChart.render();

      const itemsChart = createChart("itemsChartContainer", "# Items", "# Items");
      itemsChart.options.data = itemsChartLines;
      itemsChart.render();
    });
  </script>
<% end %>
